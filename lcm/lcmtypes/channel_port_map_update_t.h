// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by the regenerate.sh script in this directory

#ifndef _channel_port_map_update_t_h
#define _channel_port_map_update_t_h

#include <stdint.h>
#include <stdlib.h>
#include "../lcm_coretypes.h"

#ifdef __cplusplus
extern "C" {
#endif

#include "channel_to_port_t.h"
typedef struct _channel_port_map_update_t channel_port_map_update_t;
struct _channel_port_map_update_t
{
    int16_t    num_ports;

    /**
     * size of the port range for the mappings
     */
    int16_t    num_channels;

    /**
     * LCM Type: channel_to_port_t[num_channels]
     */
    channel_to_port_t *mapping;
};

/**
 * Create a deep copy of a channel_port_map_update_t.
 * When no longer needed, destroy it with channel_port_map_update_t_destroy()
 */
channel_port_map_update_t* channel_port_map_update_t_copy(const channel_port_map_update_t* to_copy);

/**
 * Destroy an instance of channel_port_map_update_t created by channel_port_map_update_t_copy()
 */
void channel_port_map_update_t_destroy(channel_port_map_update_t* to_destroy);

/**
 * Encode a message of type channel_port_map_update_t into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to channel_port_map_update_t_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int channel_port_map_update_t_encode(void *buf, int offset, int maxlen, const channel_port_map_update_t *p);

/**
 * Decode a message of type channel_port_map_update_t from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with channel_port_map_update_t_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int channel_port_map_update_t_decode(const void *buf, int offset, int maxlen, channel_port_map_update_t *msg);

/**
 * Release resources allocated by channel_port_map_update_t_decode()
 * @return 0
 */
int channel_port_map_update_t_decode_cleanup(channel_port_map_update_t *p);

/**
 * Check how many bytes are required to encode a message of type channel_port_map_update_t
 */
int channel_port_map_update_t_encoded_size(const channel_port_map_update_t *p);

// LCM support functions. Users should not call these
int64_t __channel_port_map_update_t_get_hash(void);
uint64_t __channel_port_map_update_t_hash_recursive(const __lcm_hash_ptr *p);
int __channel_port_map_update_t_encode_array(
    void *buf, int offset, int maxlen, const channel_port_map_update_t *p, int elements);
int __channel_port_map_update_t_decode_array(
    const void *buf, int offset, int maxlen, channel_port_map_update_t *p, int elements);
int __channel_port_map_update_t_decode_array_cleanup(channel_port_map_update_t *p, int elements);
int __channel_port_map_update_t_encoded_array_size(const channel_port_map_update_t *p, int elements);
int __channel_port_map_update_t_clone_array(const channel_port_map_update_t *p, channel_port_map_update_t *q, int elements);

#ifdef __cplusplus
}
#endif

#endif
