// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by the regenerate.sh script in this directory

#ifndef _channel_to_port_t_h
#define _channel_to_port_t_h

#include <stdint.h>
#include <stdlib.h>
#include "../lcm_coretypes.h"
#include "../lcm_export.h"

#ifdef __cplusplus
extern "C" {
#endif


/**
 * Definitions of the structures used to communicate between nodes.
 *
 * We also check in the autogenerated c bindings so that we don't need
 * lcm-gen to be working in order to compile.
 *
 * Use the regenerate.sh script in this directory to repeat the process.
 */
typedef struct _channel_to_port_t channel_to_port_t;
struct _channel_to_port_t
{

    /**
     * LCM Type: string
     */
    char*      channel;
    int16_t    port;
};

/**
 * Create a deep copy of a channel_to_port_t.
 * When no longer needed, destroy it with channel_to_port_t_destroy()
 */
LCM_NO_EXPORT
channel_to_port_t* channel_to_port_t_copy(const channel_to_port_t* to_copy);

/**
 * Destroy an instance of channel_to_port_t created by channel_to_port_t_copy()
 */
LCM_NO_EXPORT
void channel_to_port_t_destroy(channel_to_port_t* to_destroy);

/**
 * Encode a message of type channel_to_port_t into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to channel_to_port_t_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
LCM_NO_EXPORT
int channel_to_port_t_encode(void *buf, int offset, int maxlen, const channel_to_port_t *p);

/**
 * Decode a message of type channel_to_port_t from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with channel_to_port_t_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
LCM_NO_EXPORT
int channel_to_port_t_decode(const void *buf, int offset, int maxlen, channel_to_port_t *msg);

/**
 * Release resources allocated by channel_to_port_t_decode()
 * @return 0
 */
LCM_NO_EXPORT
int channel_to_port_t_decode_cleanup(channel_to_port_t *p);

/**
 * Check how many bytes are required to encode a message of type channel_to_port_t
 */
LCM_NO_EXPORT
int channel_to_port_t_encoded_size(const channel_to_port_t *p);

// LCM support functions. Users should not call these
LCM_NO_EXPORT
int64_t __channel_to_port_t_get_hash(void);
LCM_NO_EXPORT
uint64_t __channel_to_port_t_hash_recursive(const __lcm_hash_ptr *p);
LCM_NO_EXPORT
int __channel_to_port_t_encode_array(
    void *buf, int offset, int maxlen, const channel_to_port_t *p, int elements);
LCM_NO_EXPORT
int __channel_to_port_t_decode_array(
    const void *buf, int offset, int maxlen, channel_to_port_t *p, int elements);
LCM_NO_EXPORT
int __channel_to_port_t_decode_array_cleanup(channel_to_port_t *p, int elements);
LCM_NO_EXPORT
int __channel_to_port_t_encoded_array_size(const channel_to_port_t *p, int elements);
LCM_NO_EXPORT
int __channel_to_port_t_clone_array(const channel_to_port_t *p, channel_to_port_t *q, int elements);

#ifdef __cplusplus
}
#endif

#endif
